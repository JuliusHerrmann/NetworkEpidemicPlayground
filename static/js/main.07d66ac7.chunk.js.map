{"version":3,"sources":["SimulationScripts/simulation.js","SimulationScripts/graphUtils.js","Simulation/Slider.jsx","Simulation/HorizonSelector.jsx","Simulation/Dropdown.jsx","Simulation/exampleNetworks/Network.jsx","Simulation/exampleNetworks/Karate.jsx","Simulation/exampleNetworks/Grid.jsx","Simulation/exampleNetworks/Custom.jsx","Simulation/ContactSelector.jsx","Simulation/exampleModels/Model.jsx","Simulation/exampleModels/SIModel.jsx","Simulation/exampleModels/SEIRSModel.jsx","Simulation/exampleModels/CoronaModel.jsx","Simulation/exampleModels/Custom.jsx","Simulation/ModelSelector.jsx","Simulation/visualizations/Chart.jsx","Simulation/visualizations/GIFGenerator.jsx","Simulation/visualizations/Graph.jsx","Simulation/visualizations/Visual.jsx","Simulation/Simulation.jsx","Header/Headerdata.jsx","App.js","reportWebVitals.js","index.js"],"names":["rules","states","initial_distribution","graph_as_edgelist","horizon","nodes","timepoints_samples","current_labels","global_clock","simulation","get_next_state","fastes_firing_time","firing_rule","firing_node","firing_edge","currentNode","current_state","rule","Array","current_fireing_time","randomExponential","edge","node1","node2","current_state1","current_state2","currentRule","new_labels","from","console","assert","change_node1","change_node2","count_states","time_steps","push","counter","j","length","label","indexOf","newX","state_counts","i","rate","Math","log","random","labels","simulate","newRules","newStates","newDistr","newGraph","newHorizon","state","edgelist","allNodes","e","sort","a","b","finalArray","last","generateNodes","start","end","num","distance","current","out","round","linspace","distr","s","reduce","r","find","_","randomChoice","key","values","time_passed","slice","data","stateCounts","timeSteps","edgeListToGraph","list","outNodes","outLinks","entry","source","target","id","Slider","className","htmlFor","this","props","description","type","min","max","value","currentValue","onChange","handleChange","step","React","Component","HorizonSelector","Dropdown","changeVal","bind","index","name","newVal","options","selectedIndex","map","createOption","Network","optionName","graph","updateGraphObject","KarateClass","Grid","changeDimension","newD","setState","dimension","Number","calculateGraph","Custom","textFieldChanged","newText","input","parseInput","re","cleaned","match","output","replaceAll","forEach","element","newEntry","required","pattern","placeholder","ContactSelector","Karate","custom","predefinedNetworks","dropdownChanged","renderCustomHtml","Model","ruleMax","ruleStep","changeProbability","spot","updateSelectedModel","normalizeDistribution","sum","calculateSumOfDistributions","toPrecision","valid","changeDistribution","changeColor","checkValidity","getDistribution","count","getRules","tempCount","buildDesc","substring","buildSliders","buildSlidersDistribution","SIModel","SEIRSModel","CoronaModel","parsedInput","defaultColors","split","parseValidRule","includes","x","subString","probability","ModelSelector","predefinedModels","Chart","calculateChartData","color","colors","animationLength","xAxis","tickFormat","d","datum","y","GIFGenerator","generateGIF","rendering","abs","duration","gif","GIF","workers","quality","repeat","loop","background","on","blob","link","document","createElement","href","URL","createObjectURL","download","body","append","click","remove","setTimeout","revokeObjectURL","clearInterval","animationId","setInterval","grabImageAndNextStep","playing","delay","visualizeStep","addFrame","querySelectorAll","copy","visualizeSpecificStep","render","getButtonText","checked","onClick","Graph","changeAnimationDuration","animationDuration","stepTime","visualizeOneStep","visualizeSimulation","neverPlayed","increment","simulationData","finishAnimation","cy","elements","getElementById","style","val","createRef","layoutGraph","prevProps","graphData","ready","stop","animate","animationEasing","undefined","animateFilter","node","animationThreshold","refresh","fit","padding","boundingBox","nodeDimensionsIncludeLabels","randomize","componentSpacing","nodeRepulsion","nodeOverlap","idealEdgeLength","edgeElasticity","nestingFactor","gravity","numIter","initialTemp","coolingFactor","minTemp","layout","run","playPauseString","trigger","modal","close","userZoomingEnabled","userPanningEnabled","Visual","cropAnimation","lastState","recalculate","normalize","recalculateFuntion","then","cachedColors","cachedSimulationData","cachedGraphData","switchView","currentView","showGraphOrChart","Simulation","horizonChange","networkChange","modelChanged","networkObject","modelObject","selectedModel","getGraph","getStates","newSimulationData","selectedNetwork","newNetwork","newModel","Promise","resolve","getColors","HeaderData","rel","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.07d66ac7.chunk.js","sourcesContent":["//let states = [\"S\", \"I\", \"R\"];\n\n//let rules = [[ \"I\", \"R\", 1 ], // spontaneous rule  I -> R with rate 1.0\n\t\t\t\t//[ \"R\", \"S\", 0.7 ],  // spontaneous rule R -> S with rate 0.7\n\t\t\t\t//[ [ \"I\",\"S\",\"I\" ],[ \"I\",\"I\",\"I\" ], 0.8 ]]; // contact rule I+S -> I+I with rate 0.8\n\n\n//output\nlet simulation = []\n\n\n//let graph_as_edgelist = [[ 0, 4 ], [ 0, 1 ], [ 1, 5 ], [ 1, 2 ], [ 2, 6 ], [ 2, 3 ], [ 3, 7 ], [ 4, 8 ], [ 4, 5 ], [ 5, 9 ], [ 5, 6 ], [ 6, 10 ], [ 6, 7 ], [ 7, 11 ], [ 8, 12 ], [ 8, 9 ], [ 9, 13 ], [ 9, 10 ], [ 10, 14 ], [ 10, 11 ], [ 11, 15 ], [ 12, 13 ], [ 13, 14 ], [ 14, 15 ]];\n\n//let horizon = 20.0;   // wie lange wird simuliert\n//let initial_distribution = [0.5, 0.5, 0.0]; // gleiche Reihenfolge wie states, musss zu rules passen und normalisiert werden\nlet timepoint_num = 101;\n\nfunction get_next_state(current_labels){\n  let fastes_firing_time = 10000000.0;  //dummy\n\tlet firing_rule = null;\n\tlet firing_node = null;\n\tlet firing_edge = null;\n\n\t//if(current_labels == null)\n\t//iterate over nodes\n\tfor(var currentNode in nodes){\n\t\tcurrentNode = nodes[currentNode];\n\t\tlet current_state = current_labels[currentNode];\n\t\tfor(var rule in rules){\n\t\t\trule = rules[rule];\n\t\t\tif(rule[0] instanceof Array){\n\t\t\t\t//is contact rule\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(current_state === rule[0]){\n\t\t\t\tlet current_fireing_time = randomExponential(rule[2]);\n\t\t\t\t//addFiringTime(current_fireing_time);\n\t\t\t\tif(current_fireing_time < fastes_firing_time){\n\t\t\t\t\tfastes_firing_time = current_fireing_time;\n\t\t\t\t\tfiring_rule = rule;\n\t\t\t\t\tfiring_node = currentNode;\n\t\t\t\t\tfiring_edge = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//iterate over edges\n\tfor(var edge in graph_as_edgelist){\n\t\tedge = graph_as_edgelist[edge];\n\t\tlet node1 = edge[0];\n\t\tlet node2 = edge[1];\n\t\tlet current_state1 = current_labels[node1];\n\t\tlet current_state2 = current_labels[node2];\n\t\tfor(var currentRule in rules){\n\t\t\tcurrentRule = rules[currentRule];\n      if(typeof currentRule[0] == typeof \"\"){\n\t\t\t\t//is spont. rule\n\t\t\t\tcontinue\n\t\t\t}\n      //console.log(current_state1, currentRule[0][0])\n\t\t\tif((current_state1 === currentRule[0][0] && current_state2 === currentRule[0][1]) || (current_state2 === currentRule[0][0] && current_state1 === currentRule[0][1])){\n\t\t\t\tlet current_fireing_time = randomExponential(currentRule[2]);\n\t\t\t\tif(current_fireing_time < fastes_firing_time){\n\t\t\t\t\tfastes_firing_time = current_fireing_time;\n\t\t\t\t\tfiring_rule = currentRule;\n\t\t\t\t\tfiring_node = null;\n\t\t\t\t\tfiring_edge = edge;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(firing_rule == null){\n\t\t//no rule could fire\n\t\treturn [null, fastes_firing_time]; //would happen anyway but still\n\t}\n\t//apply rule\n\tlet new_labels = Array.from(current_labels);\n\n\tif(firing_node != null){\n\t\tnew_labels[firing_node] = firing_rule[1];\n\t\treturn [new_labels, fastes_firing_time];\n\t}\n\tconsole.assert(firing_edge != null);\n\tlet change_node1 = firing_edge[0];\n\tlet change_node2 = firing_edge[1];\n\t//we have to check which node changes in which direction\n\tif(new_labels[change_node1] === firing_rule[0][0] && new_labels[change_node2] === firing_rule[0][1]){\n\t\tnew_labels[change_node1] = firing_rule[1][0];\n\t\tnew_labels[change_node2] = firing_rule[1][1];\n\t}else{\n\t\tnew_labels[change_node1] = firing_rule[1][1];\n\t\tnew_labels[change_node2] = firing_rule[1][0];\n\t}\n\n\treturn [new_labels, fastes_firing_time];\n}\n\n\nfunction count_states(current_labels){\n  //add time steps\n  time_steps.push(timepoints_samples[0]);\n\n\tvar counter = [];\n\n  for (var j = 0; j < states.length; j++) {\n    counter.push(0);\n  }\n\n\n\tsimulation.push(current_labels);\n\n\tfor(var label in current_labels){\n    label = current_labels[label];\n    let index = states.indexOf(label);\n\t\tcounter[index] += 1;\n\t}\n\n  let newX = state_counts[0][\"values\"].length;\n  //add to the global counter value\n  for (var i = 0; i < states.length; i++) {\n    state_counts[i][\"values\"].push( [newX, counter[i]] );\n  }\n}\n\nfunction generateNodes(edgelist){\n\tlet allNodes = [];\n\tfor(var e in edgelist){\n\t\te = edgelist[e];\n\t\tallNodes.push(e[0]);\n\t\tallNodes.push(e[1]);\n\t}\n\t//sort\n  allNodes = allNodes.sort(function(a, b) {\n    return a - b;\n  });\n\n\t//remove duplicates\n\tlet finalArray = [];\n\tvar last = -1;\n\tfor(var i = 0; i < allNodes.length; i ++){\n\t\tif(last === allNodes[i]){\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tfinalArray.push(allNodes[i])\n\t\t\tlast = allNodes[i];\n\t\t}\n\t}\n\treturn finalArray;\n}\n\n\n\n// np helper functions\nfunction randomExponential(rate){\n\tif(rate === 0){ return 10000000 }\n\treturn -Math.log(Math.random()) / rate;\n}\n\nfunction linspace(start, end, num){\n\tconsole.assert(start < end);\n\tconsole.assert(num > 0);\n\tlet distance = (end - start) / (num - 1);\n\tlet current = start;\n\tlet out = [];\n\twhile(current <= end){\n\t\tout.push(Math.round(current * 100) / 100);\n\t\tcurrent += distance;\n\t}\n\treturn out;\n}\n\nfunction randomChoice(states, num, distr){\n\tlet out = [];\n\tlet s = distr.reduce((a,e) => a + e);\n\tfor(var i = 0; i < num; i++){\n\t\tlet r = Math.random() * s;\n\t\tout.push(states.find((_,i) => (r -= distr[i]) < 0));\n\t}\n\treturn out;\n}\n\n\n//This is to be set by parent\nlet rules;\nlet states;\nlet initial_distribution;\nlet graph_as_edgelist;\nlet horizon;\n\nlet nodes;\n\n//setup\nlet timepoints_samples;\nlet current_labels;\nlet global_clock;\nlet labels = [];\nlet state_counts = {};\nlet time_steps = [];\n\nfunction simulate(newRules, newStates, newDistr, newGraph, newHorizon){\n\tsimulation = [];\n\trules = newRules;\n\tstates = newStates;\n\tinitial_distribution = newDistr;\n\tgraph_as_edgelist = newGraph;\n\thorizon = newHorizon;\n\t//setup \n\tnodes = generateNodes(graph_as_edgelist);\n\ttimepoints_samples = linspace(0, horizon, timepoint_num);\n\tcurrent_labels = randomChoice(states, nodes.length, initial_distribution);\n\tglobal_clock = 0;\n\tlabels = [];\n\tstate_counts = [];\n\n  \n  //initiate count_states\n  for (var state in states) {\n    state = states[state];\n    state_counts.push({key: state, values: []});\n  }\n\n\twhile(timepoints_samples.length > 0){\n\t\tlet [new_labels, time_passed] = get_next_state(current_labels);\n\t\tglobal_clock += time_passed;\n\t\twhile(timepoints_samples.length > 0 && global_clock > timepoints_samples[0]){\n\t\t\tlabels.push(Array.from(current_labels));\n\t\t\tcount_states(current_labels);\n\t\t\ttimepoints_samples = timepoints_samples.slice(1, timepoints_samples.length);\n\t\t}\n\t\tcurrent_labels = new_labels;\n\t}\n\treturn {data: simulation, stateCounts: state_counts, timeSteps: time_steps};\n}\n\nexport default simulate;\n","//function edgelistToDot(name, inp){\n\t//var output = \"strict graph \\\"\" + name + \"\\\" {\\n\";\n\t//for(var e in inp){\n\t\t//e = inp[e];\n\t\t//output += e[0] + \" -- \" + e[1] + \";\\n\";\n\t//}\n\t//output += \"}\";\n\t//return output;\n//}\n//\n//function dotToEdgelist(graph){\n\t//var outList = [];\n\t//graph = graph.split(\"\\n\");\n\t////var name = graph[0].split(\" \")[2];\n\t////name = name.slice(1, name.length - 1);\n\t//for (var i = 0; i < graph.length - 1; i++){\n\t\t//if(i === 0){\n\t\t\t//continue;\n\t\t//}\n\t\t//var nodes = graph[i].split(\"--\");\n\t\t//var node1 = Number(nodes[0]);\n\t\t//var node2 = Number(nodes[1].slice(0, nodes[1].length - 1));\n\t\t//outList.push([node1, node2]);\n\t//}\n\t//return outList;\n//}\n\nfunction edgeListToGraph(list){\n\tlet outNodes = [];\n\tlet outLinks = [];\n\tfor (var entry in list){\n\t\tentry = list[entry];\n\t\toutNodes.push(entry[0]);\n\t\toutNodes.push(entry[1]);\n\t\toutLinks.push({data: {source: entry[0], target:entry[1]}});\n\t}\n\t//sort\n\toutNodes = outNodes.sort((a, b) => (a > b));\n\t//remove duplicates\n\tlet finalArray = [];\n\tvar last = -1;\n\tfor(var i = 0; i < outNodes.length; i ++){\n\t\tif(last === outNodes[i]){\n\t\t\tcontinue;\n\t\t}\n\t\telse{\n\t\t\tfinalArray.push({data: {id: outNodes[i], label: \"\"}})\n\t\t\tlast = outNodes[i];\n\t\t}\n\t}\n\toutNodes = finalArray;\n\treturn [...outNodes, ...outLinks]\n}\n\nexport default edgeListToGraph;\n","import React from \"react\";\nimport '../css/Slider.css'\n\nclass Slider extends React.Component{\n  componentDidMount() {\n\n  }\n\trender(){\n    return (\n      <div className='SliderDiv'>\n        <label htmlFor='Slider' className='SliderDescription'>{this.props.description}</label>\n        <input className='Slider' type='range' min={this.props.min} max={this.props.max} value={this.props.currentValue}\n        onChange={this.props.handleChange} step={this.props.step}\n      />\n          <input type=\"number\" htmlFor='Slider' className='SliderValue' value={this.props.currentValue} onChange={this.props.handleChange}/>\n    </div>\n        );\n  }\n}\n\nexport default Slider;\n","import React from 'react';\nimport Slider from './Slider';\n\nclass HorizonSelector extends React.Component{\n\trender(){\n\t\treturn (\n\t\t\t<div id='HorizonSelector'>\n\t\t\t\t<h2 id='HorizonSelectorName' className='selectorName'>\n\t\t\t\t\tSelect the simulation horizon</h2>\n\t\t\t\t<Slider description='Select Horizon'\n\t\t\t\thandleChange={this.props.handleChange}\n\t\t\t\tcurrentValue={this.props.currentValue}\n\t\t\t\tmin='1' max='200'/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default HorizonSelector;\n","import React from 'react';\nimport '../css/Dropdown.css'\n\nclass Dropdown extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.changeVal = this.changeVal.bind(this);\n\t}\n\n\tcreateOption(data, index){\n\t\treturn (\n\t\t\t<option value={data.name} key={index}>{data.name}</option>\n\t\t\t);\n\t}\n\n\tchangeVal(e){\n\t\tlet newVal = this.props.options[e.target.selectedIndex];\n\t\tthis.props.handleChange(newVal);\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div className='DropdownDiv'>\n\t\t\t\t<label htmlFor='Dropdown' className='DropdownDescription'>{this.props.description}</label>\n\t\t\t\t<select className='Dropdown'\n\t\t\t\tname={this.props.name}\n        onChange={this.changeVal}>\n\t\t\t\t\t{this.props.options.map(this.createOption)}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t);\n\t};\n}\n\nexport default Dropdown;\n","import React from \"react\";\nimport '../../css/Network.css'\n\nclass Network extends React.Component{\n\tconstructor(optionName, graph){\n\t\tsuper()\n    this.optionName = optionName;\n\t\tthis.graph = graph;\n\t}\n\n\t//override default name getter\n\tget name(){\n\t\treturn this.optionName;\n\t}\n\n  getGraph() {\n    return this.graph;\n  }\n\n  componentDidMount() {\n    //update state on select\n    this.props.updateGraphObject(this);\n  }\n}\n\nexport default Network;\n","import Network from \"./Network\";\n\nclass KarateClass extends Network {\n\tconstructor(){\n    super(\"Karate\",\n[[1, 0], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2], [4, 0], [5, 0], [6, 0], [6, 4], [6, 5], [7, 0], [7, 1], [7, 2], [7, 3], [8, 0], [8, 2], [9, 2], [10, 0], [10, 4], [10, 5], [11, 0], [12, 0], [12, 3], [13, 0], [13, 1], [13, 2], [13, 3], [16, 5], [16, 6], [17, 0], [17, 1], [19, 0], [19, 1], [21, 0], [21, 1], [25, 23], [25, 24], [27, 2], [27, 23], [27, 24], [28, 2], [29, 23], [29, 26], [30, 1], [30, 8], [31, 0], [31, 24], [31, 25], [31, 28], [32, 2], [32, 8], [32, 14], [32, 15], [32, 18], [32, 20], [32, 22], [32, 23], [32, 29], [32, 30], [32, 31], [33, 8], [33, 9], [33, 13], [33, 14], [33, 15], [33, 18], [33, 19], [33, 20], [33, 22], [33, 23], [33, 26], [33, 27], [33, 28], [33, 29], [33, 30], [33, 31], [33, 32]]\n      //[[2, 1],[3, 1], [3, 2],[4 ,1], [4, 2], [4, 3],[5, 1],[6, 1],[7, 1], [7, 5], [7, 6],[8, 1], [8, 2], [8, 3], [8, 4],[9, 1], [9, 3],[10, 3],[11, 1], [11, 5], [11, 6],[12, 1],[13, 1], [13, 4],[14, 1], [14, 2], [14, 3], [14, 4],[17, 6], [17, 7],[18, 1], [18, 2],[20, 1], [20, 2],[22, 1], [22, 2],[26, 24], [26, 25],[28, 3], [28, 24], [28, 25],[29, 3],[30, 24], [30, 27],[31, 2], [31, 9],[32, 1], [32, 25], [32, 26], [32, 29],[33, 3], [33, 9], [33, 15], [33, 16], [33, 19], [33, 21], [33, 23], [33, 24], [33, 30], [33, 31], [33, 32], [34, 9], [34, 10], [34, 14], [34, 15], [34, 16], [34, 19], [34, 20], [34, 21], [34, 23], [34, 24], [34, 27], [34, 28], [34, 29], [34, 30], [34, 31], [34, 32], [34, 33]]\n    );\n  }\n\n\trender(){\n    return (<h3 id=\"karateExplanation\">This is the so called \"Zachary Karate Club Network\". It models a university karate club.</h3>);\n\t}\n}\n\nexport default KarateClass;\n","import Network from \"./Network\";\nimport Slider from \"../Slider\";\n\nclass Grid extends Network {\n  constructor(){\n    super(\"2D-Grid\", []);\n    this.state = {dimension: 3};\n  }\n\n  changeDimension = (e) => {\n    let newD = e.target.value;\n    if(newD < 1 || newD > 100){\n      return;\n    }\n    this.setState({dimension: Number(newD)});\n\n    //Update state\n    this.props.updateGraphObject(this);\n  }\n\n  calculateGraph(){\n    //We calculate our edgelist here\n    this.graph = [];\n    for(let i = 0; i < this.state.dimension * this.state.dimension; i++){\n      if((i + 1) % this.state.dimension !== 0) {\n        this.graph.push([i, i + 1]);\n      }\n      if(i < (this.state.dimension * this.state.dimension) - this.state.dimension) {\n        this.graph.push([i, i + this.state.dimension]);\n      }\n    }\n    return this.graph;\n    //return edgeListToGraph(this.graph);\n  }\n\n  getGraph() {\n    return this.calculateGraph();\n  }\n\n  render(){\n    return (<div id='dimensionSlider'> <Slider description='Select a dimension' handleChange={this.changeDimension}\n    min='2' max='12' currentValue={this.state.dimension}/> \n    </div>);\n  }\n}\n\nexport default Grid;\n","import Network from \"./Network\";\nimport React from \"react\";\n\nclass Custom extends Network {\n\tconstructor(){\n    super(\"Custom\",\n    [[1,1], [2,1], [3,1], [4,1]]);\n    this.state = {input: \"\"};\n\t}\n\n  textFieldChanged = (e) => {\n    let newText = e.target.value;\n    this.setState({input: newText});\n  }\n\n  getGraph() {\n    return this.parseInput(this.state.input);\n  }\n\n  parseInput(input) {\n    //first we clean the input using a regex\n    let re = /[([]{1}\\s*([0-9]*)\\s*,\\s*[0-9]+\\s*[)\\]]{1}/g;\n    let cleaned = input.match(re);\n    let output = [];\n\n    //strip spaces, tabs and newlines\n    input = input.replaceAll(\" \", \"\");\n    input = input.replaceAll(\"\\t\", \"\");\n    input = input.replaceAll(\"\\n\", \"\");\n\n    //we now match each single number and put it in our output\n    re = /[0-9]+/g;\n    if (cleaned == null) {\n      return [];\n    }\n    cleaned.forEach((element) => {\n      let newEntry = element.match(re);\n      //convert to numbers\n      newEntry[0] = Number(newEntry[0]);\n      newEntry[1] = Number(newEntry[1]);\n      output.push(newEntry);\n    });\n\n    return output;\n  }\n\n\trender(){\n    return (<div>\n      <h3 className=\"CustomHeader\">Enter an edgelist like: <code>(0, 1), (0, 2), (1,2)</code></h3>\n      <textarea className=\"CustomInput\" type=\"text\" onChange={this.textFieldChanged}\n      value={this.state.input} required pattern=\"[([]{1}\\s*([0-9]*)\\s*,\\s*[0-9]+\\s*[)\\]]{1}\"\n      placeholder=\"(0, 1), (0, 2), (1,2)\"/>\n      </div>);\n\t}\n\n}\n\nexport default Custom;\n","import React from 'react';\n\nimport Dropdown from './Dropdown.jsx'\nimport KarateClass from './exampleNetworks/Karate.jsx';\nimport Grid from './exampleNetworks/Grid.jsx';\nimport Custom from './exampleNetworks/Custom.jsx';\n\nclass ContactSelector extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\t//predefined networks go here\n\t\tthis.Karate = new KarateClass();\n\t\tthis.Grid = new Grid();\n\n\t\t//obligatory custom network\n\t\tthis.custom = new Custom();\n\n\t\tthis.state = {predefinedNetworks: [this.Karate, this.Grid, this.custom]\n\t\t\t\t\t\t\t\t\t, currentValue: \"Karate\"};\n\t\tthis.dropdownChanged = this.dropdownChanged.bind(this);\n\t\tthis.updateGraphObject = this.updateGraphObject.bind(this);\n\t\t}\n\n\tdropdownChanged(e){\n\t\tthis.setState({currentValue: e.name});\n\t\tthis.props.handleChange(e);\n\t}\n\n  //when the object changed we need to update it again\n  updateGraphObject(e) {\n    this.props.handleChange(e);\n  }\n\n\trenderCustomHtml(){\n\t\tswitch(this.state.currentValue){\n\t\t\tcase \"Karate\":\n\t\t\t\treturn <KarateClass updateGraphObject={this.updateGraphObject}/>\n\t\t\tcase \"2D-Grid\":\n\t\t\t\treturn <Grid updateGraphObject={this.updateGraphObject}/>\n\t\t\tcase \"Custom\":\n\t\t\t\treturn <Custom updateGraphObject={this.updateGraphObject}/>\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div id='ContactSelector'>\n\t\t\t\t<h2 id='ContactSelectorName' className='selectorName'>\n\t\t\t\t\tContact Network</h2>\n\t\t\t\t<Dropdown name='Select Network'\n\t\t\t\tdescription='Select a network'\n\t\t\t\toptions={this.state.predefinedNetworks}\n\t\t\t\thandleChange={this.dropdownChanged}/>\n\t\t\t\t{this.renderCustomHtml()}\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default ContactSelector;\n","import React from \"react\";\nimport Slider from \"../Slider\";\nimport '../../css/Model.css';\n\nclass Model extends React.Component {\n  constructor(optionName, states, rules, ruleMax, ruleStep) {\n    super();\n    this.optionName = optionName;\n    this.states = states;\n    this.rules = rules;\n    this.ruleMax = ruleMax;\n    this.ruleStep = ruleStep;\n    //this.state = {valid: true};\n    this.valid = true;\n    this.checkValidity();\n  }\n\n  //override default get name\n  get name() {\n    return this.optionName;\n  }\n\n  getRules() {\n    return this.rules;\n  }\n\n\n  getStates() {\n    var output = [];\n    this.states.forEach((s) => {\n      output.push(s[0]);\n    });\n    return output;\n  }\n\n  getColors() {\n    var output = [];\n    this.states.forEach((s) => {\n      output.push([s[0], s[2]]);\n    });\n    return output;\n  }\n\n  getDistribution() {\n    var output = [];\n    this.states.forEach((s) => {\n      output.push(s[1]);\n    });\n    return output;\n  }\n\n  componentDidMount() {\n    //update\n    this.props.updateSelectedModel(this);\n  }\n\n  changeProbability = (spot, e) =>  {\n    //update state\n    this.setState({});\n    this.rules[spot][2] = Number(e.target.value);\n    //update\n    this.props.updateSelectedModel(this);\n  }\n\n  //normalize the distribution to 1 to ease the user experience with a button\n  normalizeDistribution = () => {\n    let sum = this.calculateSumOfDistributions();\n    // do not act if we have a sum of 1\n    if (sum === 0) {\n      return;\n    }\n    //check if we need to add or remove it by changing the sign\n    this.states = this.states.map((element) => {\n      element[1] = Number((element[1] / sum).toPrecision(2));\n      return element;\n    });\n    //update\n    this.valid = true;\n    this.setState({});\n  }\n\n  checkValidity() {\n    let sum = this.calculateSumOfDistributions();\n    //check if the distribution is about 1\n    if (sum < 0.99 || sum > 1.01) {\n      //this.setState({valid: false});\n      this.valid = false;\n      return;\n    }\n    //this.setState({valid: true});\n    this.valid = true;\n  }\n\n  calculateSumOfDistributions() {\n    let sum = 0;\n    this.getDistribution().forEach((element) => {\n      sum += element;\n    });\n    return sum;\n  }\n\n  changeDistribution = (spot, e) =>  {\n    //update state\n    this.setState({});\n    this.states[spot][1] = Number(e.target.value);\n    //update\n    this.props.updateSelectedModel(this);\n    //this.checkValidity();\n  }\n\n  changeColor = (spot, e) => {\n    this.setState({});\n    this.states[spot][2] = e.target.value;\n    //update\n    this.props.updateSelectedModel(this);\n  }\n\n  //build the description of the slider\n  buildDesc(r) {\n    var output = r[0] + \"->\" + r[1];\n    return output.replaceAll(\",\", \"+\");\n  }\n\n  //build all sliders\n  buildSliders(max, step) {\n    var output = [];\n    var count = 0;\n    this.getRules().forEach((r) =>  {\n      var tempCount = count;\n      output.push(<Slider key={tempCount} description={this.buildDesc(r)} handleChange={(e) => this.changeProbability(tempCount, e)} min=\"0\" max={max} currentValue={r[2]} step={step}/>)\n      count++;\n    });\n\n    return output;\n  }\n\n  //build the sliders for the initial distribution\n  buildSlidersDistribution() {\n    //var output = [<button key=\"normalization\" id=\"normalizeDistribution\" onClick={this.normalizeDistribution}>Normalize distribution 🔔</button>, <DistributionStatus key=\"validation\" valid={this.valid}/>];\n    var output = [];\n    var count = 0;\n    this.states.forEach((s) => {\n      //clamp description\n      let description = s[0];\n      if (description.length > 10) {\n        description = description.substring(0,11) + \"...\";\n      }\n      var tempCount = count;\n      output.push(<div key={tempCount * -tempCount - 100}>\n        <input key={-tempCount - 1} type=\"color\" className=\"ColorPicker\" value={this.states[tempCount][2]} onChange={(e) => this.changeColor(tempCount, e)}/>\n        <Slider key={tempCount} description={description} handleChange={(e) => this.changeDistribution(tempCount, e)} min=\"0\" max=\"1\" currentValue={s[1]} step=\"0.001\"/>\n      </div>\n      );\n      count ++;\n    });\n\n    return output;\n  }\n\n  render() {\n    return (\n      <div className=\"modelSelector\">\n        <h3 id=\"selectRulesHeader\">Transition Rates</h3>\n        {this.buildSliders(this.ruleMax, this.ruleStep)}\n        <h3 id=\"selectDistributionHeader\">Initial Distribution</h3>\n        {this.buildSlidersDistribution()}\n      </div>\n    );\n  }\n}\n\nexport default Model;\n","import Model from \"./Model\";\n\nclass SIModel extends Model  {\n  constructor() {\n    super(\"SI-Model\",\n      [[\"S\", 0.9, \"#0FA75F\"], [\"I\", 0.1, \"#ff225b\"]],\n      [[[\"S\", \"I\"],[\"I\", \"I\"], 0.5]],\n      20, 0.05);\n  }\n}\n\nexport default SIModel;\n","import Model from \"./Model\";\n\nclass SEIRSModel extends Model  {\n  constructor() {\n  super(\"SEIRS-Model\",\n    [[\"E\", 0.03, \"#1F85DE\"], [\"I\", 0.03, \"#de1f50\"], [\"R\", 0.03, \"#b91fde\"], [\"S\", 0.91, \"#1fdea7\"]],\n    [[[\"S\", \"I\"], [\"I\", \"E\"], 0.5],\n      [\"E\", \"I\", 0.5],\n      [\"I\", \"R\", 0.5],\n      [\"R\", \"S\", 0.5]],\n    20, 0.05);\n  }\n}\n\nexport default SEIRSModel;\n","import Model from \"./Model\";\n\nclass CoronaModel extends Model  {\n  constructor() {\n    super(\"Corona-Model\",\n      [[\"S\", 0.830, \"#1F85DE\"], [\"E\", 0.1, \"#010061\"], [\"I1\", 0.005, \"#de1f50\"], [\"I2\", 0.005, \"#b91fde\"], [\"I3\", 0.005, \"#1fdea7\"], [\"R\", 0.005, \"#8fde1f\"], [\"V\", 0.005, \"#de801f\"], [\"D\", 0.005, \"#3b0b0b\"]],\n      [[[\"I1\", \"S\"], [\"I2\", \"E\"], 0.15],\n        [[\"I2\", \"S\"], [\"I2\", \"E\"], 0.05],\n        [[\"I3\", \"S\"], [\"I3\", \"E\"], 0.05],\n        [\"E\", \"I1\", 0.2],\n        [\"I1\", \"I2\", 0.03],\n        [\"I2\", \"I3\", 0.04],\n        [\"I3\", \"D\", 0.25],\n        [\"I1\", \"R\", 0.13],\n        [\"I2\", \"R\", 0.13],\n        [\"I3\", \"R\", 0.12]],\n      1, 0.01);\n  }\n}\n\nexport default CoronaModel;\n","import Model from \"./Model\";\n\nclass Custom extends Model  {\n  constructor() {\n    super(\"Custom\",\n      [[\"S\", 0.97, \"#1F85DE\"], [\"I\", 0.03, \"#de1f50\"]],\n      [[\"S\", \"I\", 0.5]],\n      20, 0.05);\n    this.state = {input: \"\"};\n    this.defaultColors = [\"#0fa75f\", \"#ff225b\", \"#03aaf9\", \"#fffb00\", \"#cc0080\"];\n  }\n\n  textFieldChanged = (e) => {\n    let input = e.target.value;\n    this.setState({input: input});\n    let parsedInput = this.parseInput(e.target.value);\n    //check if the input is correct, if yes then update\n    if (parsedInput == null) {\n      return;\n    }\n    this.rules = parsedInput.rules;\n    this.states = parsedInput.states;\n    console.log(this.rules, this.states);\n  }\n\n  parseInput(input) {\n    //regex for filtering valid rules (this is longer than it is complicated)\n    let re = /[[(]\"?[\\w\\d]+\"?,\"?[\\w\\d]+\"?,([0-9]*[.])?[0-9]+[)\\]][\\s\\t]*|[([][([](\"?[\\w\\d]+\"?,)+\"?[\\w\\d]+\"?[\\])],[([](\"?[\\w\\d]+\"?,)+\"?[\\w\\d]+\"?[\\])],([0-9]*[.])?[0-9]+[\\])][\\s\\t]*/g;\n    //strip spaces, tabs and newlines\n    input = input.replaceAll(\" \", \"\");\n    input = input.replaceAll(\"\\t\", \"\");\n    input = input.replaceAll(\"\\n\", \"\");\n\n    let cleaned = input.match(re);\n    if(cleaned == null) {\n      return null;\n    }\n\n    let newStates = [];\n    let newRules = [];\n    //regex to match states\n    cleaned.forEach((element) => {\n      element = element.split(\",\");\n      //test if we have a simple or complex rule\n      if (element.length === 3) {\n        newRules.push(this.parseValidRule(element, newStates));\n      } else {\n        //check if there are an equal number of states left and right\n        if (element.length % 2 === 0) {\n          return;\n        }\n        //check if there is a split in the middle if not left != right\n        if (!element[((element.length - 1) / 2)].includes(\"(\")) {\n          return;\n        }\n        //this rule is correct, we can continue\n        newRules.push(this.parseValidRule(element, newStates));\n      }\n    });\n    if (newRules.length === 0) {\n      return null;\n    }\n\n    //parse states\n    //for (var i = 0; i < newRules.length; i++) {\n      //for (var j = 0; j < newRules[i].length - 1; j++) {\n        //let currentState = newRules[i][j];\n        //if (!newStates.includes(currentState)) {\n          //newStates.push(currentState);\n        //}\n      //}\n    //}\n\n    //convert states to states with distribution and color\n    //newStates = newStates.map((x) => [x, 1/newStates.length, \"#ffffff\"]);\n    let i = -1;\n    newStates = newStates.map((x) =>  {\n      i++;\n      if(i < 5) {\n        return [x, 1/newStates.length, this.defaultColors[i]];\n      }\n      return [x, 1/newStates.length, \"#ffffff\"];\n    });\n\n  \n    return {rules: newRules, states: newStates};\n  }\n\n  parseValidRule(rule, newStates) {\n    //filter states\n    let subString = rule.slice(0, rule.length - 1);\n\n    //match states\n    let re = /[\\w\\d]+/g;\n    subString = subString.map((x) => x.match(re)[0]);\n    //match probability\n    re = /([0-9]*[.])?[0-9]+/g\n    let probability = rule[rule.length - 1].match(re);\n    //add states\n    subString.forEach((e) => {\n      if(!newStates.includes(e)) {\n        newStates.push(e);\n      }\n    })\n    //spontaneous rule\n    if(subString.length === 2) {\n      return [...subString, Number(probability)];\n    }\n    //complex (edge) rule\n    let leftSide = subString.slice(0, subString.length / 2);\n    let rightSide = subString.slice(subString.length / 2, subString.length);\n    let out = [leftSide, rightSide, Number(probability)];\n    return out;\n    //let out = [0,0,0];\n    //out[0] = (leftSide);\n    //out[1] = (rightSide);\n    //out[2] = (Number(probability));\n    //return out;\n  }\n\n  //override render\n  render() {\n    return(<div>\n      <h3>Enter the rules like: <code>(\"S\",\"I\",0.1), ((\"I\",\"S\"),(\"I\",\"I\"),0.3)</code></h3>\n      <textarea className=\"CustomInput CustomModel\" type=\"text\" onChange={this.textFieldChanged}\n      value={this.state.input} required pattern=\"[[(]'?[\\w\\d]+'?,'?[\\w\\d]+'?,([0-9]*[.])?[0-9]+[)\\]][\\s\\t]*|[([][([]('?[\\w\\d]+'?,)+'?[\\w\\d]+'?[\\])],[([]('?[\\w\\d]+'?,)+'?[\\w\\d]+'?[\\])],([0-9]*[.])?[0-9]+[\\])][\\s\\t]*\"\n      placeholder='(\"S\",\"I\",0.1), ((\"I\",\"S\"),(\"I\",\"I\"),0.3)'/>\n        <h3 id=\"selectDistributionHeader\">Initial Distribution</h3>\n      {this.buildSlidersDistribution()}\n      </div>);\n  }\n}\n\nexport default Custom;\n","import React from 'react';\n\nimport Dropdown from './Dropdown.jsx'\nimport SIModel from './exampleModels/SIModel.jsx';\nimport SEIRSModel from './exampleModels/SEIRSModel.jsx';\nimport CoronaModel from './exampleModels/CoronaModel.jsx';\nimport Custom from './exampleModels/Custom.jsx';\n\nclass ModelSelector extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\t//predefined networks go here\n    this.SIModel = new SIModel();\n    this.SEIRSModel = new SEIRSModel();\n    this.CoronaModel = new CoronaModel();\n\n    //obligatory custom option\n    this.custom = new Custom();\n\n\t\tthis.state = {predefinedModels: [this.SIModel, this.SEIRSModel, this.CoronaModel, this.custom]\n\t\t\t\t\t\t\t\t\t, currentValue: \"SI-Model\"};\n\t\tthis.dropdownChanged = this.dropdownChanged.bind(this);\n\t\tthis.updateSelectedModel = this.updateSelectedModel.bind(this);\n\t\t}\n\n\tdropdownChanged(e){\n\t\tthis.setState({currentValue: e.name});\n\t\tthis.props.handleChange(e);\n\t}\n\n  //when the object changed we need to update it again\n  updateSelectedModel(e) {\n    this.props.handleChange(e);\n  }\n\n\trenderCustomHtml(){\n\t\tswitch(this.state.currentValue){\n\t\t\tcase \"SI-Model\":\n\t\t\t\treturn <SIModel updateSelectedModel={this.updateSelectedModel}/>\n\t\t\tcase \"SEIRS-Model\":\n\t\t\t\treturn <SEIRSModel updateSelectedModel={this.updateSelectedModel}/>\n\t\t\tcase \"Corona-Model\":\n\t\t\t\treturn <CoronaModel updateSelectedModel={this.updateSelectedModel}/>\n\t\t\tcase \"Custom\":\n\t\t\t\treturn <Custom updateSelectedModel={this.updateSelectedModel}/>\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div id='ModelSelector'>\n\t\t\t\t<h2 id='ModelSelectorName' className='selectorName'>\n\t\t\t\t\tSpreading Model</h2>\n\t\t\t\t<Dropdown name='Select Model'\n\t\t\t\tdescription='Select a network'\n\t\t\t\toptions={this.state.predefinedModels}\n\t\t\t\thandleChange={this.dropdownChanged}/>\n\t\t\t\t{this.renderCustomHtml()}\n\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default ModelSelector;\n","import React from \"react\";\nimport NVD3Chart from 'react-nvd3';\nimport '../../css/Chart.css'\nimport '../../css/nv3d.css'\n\nclass Chart extends React.Component {\n  calculateChartData = () => {\n    for (let i = 0; i < this.props.stateCounts.length; i++) {\n      //set color\n      this.props.stateCounts[i].color = \n        this.props.colors.find(element => element[0] ===\n          this.props.stateCounts[i][\"key\"]\n        )[1]\n      //apply cropping\n      this.props.stateCounts[i][\"values\"] = \n        this.props.stateCounts[i][\"values\"].slice(0, this.props.animationLength + 1);\n    }\n    return this.props.stateCounts;\n  }\n\n  render() {\n    return(\n      <div id=\"chart\">\n        <NVD3Chart type=\"stackedAreaChart\" xAxis={{ tickFormat: (d) => this.props.timeSteps[d]}} datum={this.calculateChartData} x={(d) => d[0]} y={(d) => d[1]} />\n      </div>);\n  }\n}\n\nexport default Chart;\n","import React from 'react';\nimport '../../css/Graph.css';\nimport '../../css/GIFGenerator.css';\nimport GIF from '@dhdbstjr98/gif.js';\n\nclass GIFGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {step: 0, duration: 5, loop: true, background: \"#ffffff\", rendering: false};\n    this.animationId = 0;\n  }\n\n\n  generateGIF = () => {\n    if(this.state.rendering) {\n      return;\n    }\n    //clean input\n    if(!Math.abs(Number(this.state.duration)) > 0) {\n      console.log(\"Only numbers are allowed in duration!\");\n      return;\n    }\n    this.setState({rendering: true});\n    this.setState({duration: Number(Math.abs(this.state.duration))},\n      () => {\n        var gif = new GIF( {\n          workers: 2,\n          quality: 10,\n          repeat: this.state.loop? 0 : -1,\n          background: this.state.background,\n        });\n\n        //set download trigger\n        gif.on('finished', function(blob) {\n          this.setState({rendering: false});\n          const link = document.createElement('a');\n          // create a blobURI pointing to our Blob\n          link.href = URL.createObjectURL(blob);\n          link.download = \"simulationGIF\";\n          // some browser needs the anchor to be in the doc\n          document.body.append(link);\n          link.click();\n          link.remove();\n          // in case the Blob uses a lot of memory\n          setTimeout(() => URL.revokeObjectURL(link.href), 7000);\n        }.bind(this));\n\n\n        //clear playing animation\n        clearInterval(this.animationId);\n\n        this.props.setState({step: 0}, () => {\n          this.animationId = setInterval(this.grabImageAndNextStep.bind(null, gif, this.state.duration * 1000 / this.props.animationLength), 1);\n          this.props.setState({playing: true});\n        });\n      });\n  }\n\n  grabImageAndNextStep = (gif, delay) => {\n    //check if we are at the end\n    if (this.state.step > this.props.animationLength) {\n      clearInterval(this.animationId);\n      //add last frame and finish\n      //mock slider\n      this.visualizeStep(this.state.step);\n      gif.addFrame(document.querySelectorAll(\"canvas\")[2],\n        {copy: true, delay: delay});\n\n      //reset animation\n      this.props.setState({playing: false, step: 0 });\n      this.props.visualizeSpecificStep({target: {value: 0}});\n\n      gif.render();\n      return;\n    }\n    //mock slider\n    this.visualizeStep(this.state.step);\n    //select the canvas (this is a bit hacky but ey it works)\n    gif.addFrame(document.querySelectorAll(\"canvas\")[2],\n      {copy: true, delay: delay});\n    this.setState({step: this.state.step + 1});\n  }\n\n  //visualize one step... mocking the slider\n  visualizeStep = (i) => {\n    //the object is created to simulate a slider movement\n    this.props.visualizeSpecificStep({target: {value: i}});\n  }\n\n  getButtonText = () => {\n    if(this.state.rendering) {\n      return \"Please Wait ...\";\n    }\n    return \"Generate GIF 📸\";\n  }\n\n  //onChange={(e) => this.setState({loop: e.state.value})}>\n  render() {\n    return (\n      <div id=\"generateGIFPopup\">\n        <div className=\"popupHeader\">\n          GIF Generator\n        </div>\n        <div className=\"popupSection\">\n          <label htmlFor=\"gifDuration\" id=\"gifLengthLabel\">Duration In Seconds: </label>\n          <input htmlFor=\"gifDuration\" type=\"number\" id=\"gifLengthInput\"\n          value={this.state.duration} onChange={(e) => this.setState({duration: e.target.value})}/>\n        </div>\n\n        <div className=\"popupSection\">\n          <label htmlFor=\"gifBackground\" id=\"gifBackgroundLabel\">Background Color: </label>\n          <input htmlFor=\"gifBackground\" id=\"gifBackgroundInput\" type='color'\n          value={this.state.background}\n          onChange={(e) => this.setState({background: e.target.value})}/>\n        </div>\n        <div className=\"popupSection\">\n          <label htmlFor=\"gifLoop\" id=\"gifLoopLabel\">Loop: </label>\n          <input htmlFor=\"gifLoop\" id=\"gifLoopInput\" type=\"checkbox\" checked={this.state.loop}\n          onChange={(e) => \n          this.setState({loop: e.target.checked})}/>\n        </div>\n        <button className=\"popupButton\" onClick={this.generateGIF} >{this.getButtonText()}</button>\n      </div>\n      );\n  }\n}\n\nexport default GIFGenerator;\n","import React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport Popup from 'reactjs-popup';\nimport '../../css/Graph.css';\nimport Slider from '../Slider';\nimport GIFGenerator from './GIFGenerator';\n//import GIF from '@dhdbstjr98/gif.js';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    //this.props.animationLength = 101;\n    this.cy = React.createRef();\n    this.stepTime = 0;\n    this.neverPlayed = true;\n    this.state ={animationDuration: 4, step: 0, playing: false, gif: null};\n  }\n\n  componentDidMount() {\n    //initial layout\n    this.layoutGraph();\n    this.setState({step: 0}, () => {\n      //crop animation\n      this.visualizeOneStep(false);\n    });\n  }\n\n  componentDidUpdate(prevProps, _) {\n    //only recalculate the layout if graph has changed\n    if (prevProps.graphData !== this.props.graphData) {\n      console.log(\"updated component => error\");\n      this.layoutGraph();\n      this.setState({step: 0}, () => {\n        //first crop the animation\n        clearInterval(this.animationId);\n        this.setState({playing: false});\n        this.visualizeOneStep(false);\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.animationId);\n  }\n\n  //layouting algorithm\n  layoutGraph() {\n    let options = {\n      name: 'cose',\n      // Called on `layoutready`\n      ready: function(){},\n      // Called on `layoutstop`\n      stop: function(){},\n      // Whether to animate while running the layout\n      // true : Animate continuously as the layout is running\n      // false : Just show the end result\n      // 'end' : Animate with the end result, from the initial positions to the end positions\n      animate: 'end',\n      // Easing of the animation for animate:'end'\n      animationEasing: undefined,\n      // The duration of the animation for animate:'end'\n      animationDuration: undefined,\n      // A function that determines whether the node should be animated\n      // All nodes animated by default on animate enabled\n      // Non-animated nodes are positioned immediately when the layout starts\n      animateFilter: function ( node, i ){ return true; },\n      // The layout animates only after this many milliseconds for animate:true\n      // (prevents flashing on fast runs)\n      animationThreshold: 250,\n      // Number of steps between consecutive screen positions update\n      refresh: 20,\n      // Whether to fit the network view after when done\n      fit: true,\n      // Padding on fit\n      padding: 30,\n      // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n      boundingBox: undefined,\n      // Excludes the label when calculating node bounding boxes for the layout algorithm\n      nodeDimensionsIncludeLabels: false,\n      // Randomize the initial positions of the nodes (true) or use existing positions (false)\n      randomize: false,\n      // Extra spacing between components in non-compound graphs\n      componentSpacing: 40,\n      // Node repulsion (non overlapping) multiplier\n      nodeRepulsion: function( node ){ return 2048; },\n      // Node repulsion (overlapping) multiplier\n      nodeOverlap: 4,\n      // Ideal edge (non nested) length\n      idealEdgeLength: function( edge ){ return 32; },\n      // Divisor to compute edge forces\n      edgeElasticity: function( edge ){ return 32; },\n      // Nesting factor (multiplier) to compute ideal edge length for nested edges\n      nestingFactor: 1.2,\n      // Gravity force (constant)\n      gravity: 1,\n      // Maximum number of steps to perform\n      numIter: 1000,\n      // Initial temperature (maximum node displacement)\n      initialTemp: 1000,\n      // Cooling factor (how the temperature is reduced between consecutive steps\n      coolingFactor: 0.99,\n      // Lower temperature threshold (below this point the layout will end)\n      minTemp: 1.0\n    };\n\n    var layout = this.cy.layout( options );\n    layout.run();\n  }\n  \n  changeAnimationDuration = (e) => {\n    this.setState({animationDuration: e.target.value,\n      playing: false, step: 0\n    }, () => {\n      this.stepTime = Math.abs(this.state.animationDuration) * 1000 / this.props.animationLength;\n      clearInterval(this.animationId);\n      this.visualizeOneStep(false);\n    });\n  }\n  \n  visualizeSimulation = () => {\n    if (this.state.playing) {\n      clearInterval(this.animationId);\n      this.setState({playing: false});\n      return;\n    } else if (this.state.step < this.props.animationLength && !this.neverPlayed) {\n      this.animationId = setInterval(this.visualizeOneStep, this.stepTime);\n      this.setState({playing: true});\n      return;\n    }\n    this.neverPlayed = false;\n    //check if we pause the animation\n    clearInterval(this.animationId);\n    this.setState({playing: false});\n    //first we need to normalize the distribution\n    //this.props.normalize();\n\n    this.setState({step: 0}, () => {\n      if (this.state.animationDuration <= 0) {\n        this.setState({animationDuration: Math.abs(this.state.animationDuration)});\n      }\n      \n      this.stepTime = (this.state.animationDuration) * 1000 / this.props.animationLength;\n      this.animationId = setInterval(this.visualizeOneStep, this.stepTime);\n      this.setState({playing: true});\n      //update the button\n      this.setState({});\n    });\n  }\n\n  //this is the method to visualize the simulation\n  visualizeOneStep = (increment = true) => {\n    //the data of the simulation is stored in: this.props.simulationData\n    var data = this.props.simulationData;\n    if (data == null) {\n      return;\n    }\n    if (this.state.step > this.props.animationLength) {\n      this.finishAnimation();\n      return;\n      //this.setState({step: 0}, () => {\n        //return;\n      //});\n    }\n\n    //if this is null do not continue => bug\n    if (this.props.colors == null || this.props.colors.length === 0) {\n      console.log(\"no colors were given\");\n      return;\n    }\n    //array of all nodes\n    let allNodes = this.cy.elements('node');\n    //do one step\n    for (var i = 0; i < allNodes.length; i++) {\n      //the current state of the current node\n      let state = data[this.state.step][i];\n      let color = this.props.colors.find((element) => {\n        return element[0] === state;\n      })[1];\n\n      this.cy.getElementById(allNodes[i].id()).style('background-color', color); }\n\n    if (increment) {\n      if (this.state.step < this.props.animationLength) {\n        this.setState({step: this.state.step + 1});\n      } else {\n        this.finishAnimation();\n      }\n    } else {\n      //update\n      this.setState({});\n    }\n  }\n\n  finishAnimation() {\n    //clearInterval(this.animationId);\n    //this.setState({playing: false, step: this.props.animationLength});\n  }\n\n  visualizeSpecificStep = (e) => {\n    var val = Number(e.target.value);\n    if (val < 0 || val > this.props.animationLength) {\n      return;\n    }\n    //first stop the current animation\n    clearInterval(this.animationId);\n    this.setState({playing: false});\n    this.setState({step: val}, () => {\n      this.visualizeOneStep(false);\n    });\n  }\n\n\n  render() {\n    var playPauseString = \"Play Simulation ▶️\";\n    if (this.state.playing) {\n      playPauseString = \"Stop Simulation ⏹️\";\n    }\n    //show directed graph *or* chart\n    //we want this to be a \"tabbed\" approach\n    return (<div id=\"graphDiv\">\n      <button id=\"runSimulationButton\" onClick={this.visualizeSimulation}>{playPauseString}</button>\n      <Popup trigger={<button id=\"gifGeneratorButton\">Generate GIF 📸</button>} modal>\n        {close => (\n        <div className=\"modal\">\n          <button className=\"close\" onClick={() => {close()}} >&times;</button>\n          <GIFGenerator setState={this.setState.bind(this)} state={this.state} visualizeSpecificStep={this.visualizeSpecificStep} animationLength={this.props.animationLength}/>\n        </div>\n      )}\n      </Popup>\n      <div id=\"durationWrapper\">\n        <h3 id=\"durationDescription\">Duration (seconds): </h3>\n        <input id=\"animationDuration\" type=\"number\" onChange={this.changeAnimationDuration} value={this.state.animationDuration}/>\n      </div>\n      <Slider description=\"Step\" min=\"0\" max={this.props.animationLength} currentValue={this.state.step} handleChange={this.visualizeSpecificStep}/>\n      <CytoscapeComponent id=\"cy\" userZoomingEnabled={false} userPanningEnabled={false}\n      cy={(cy) => { this.cy = cy }} elements={this.props.graphData}/>\n\n\n      </div>);\n  }\n}\n\nexport default Graph;\n","import React from 'react';\nimport Chart from './Chart';\nimport Graph from './Graph';\n\n//this component is the right side\nclass Visual extends React.Component {\n  constructor(props) {\n    super(props);\n    this.cy = React.createRef();\n    this.stepTime = 0;\n    this.neverPlayed = true;\n    this.state ={animationDuration: 4, step: 0, playing: false, animationLength: 100, cachedColors: this.props.colors, cachedSimulationData: this.props.simulationData, cachedGraphData: this.props.graphData, currentView: \"graph\"};\n  }\n\n  componentDidMount() {\n    this.cropAnimation();\n    this.setState({\n      cachedColors: this.props.colors,\n      cachedSimulationData: this.props.simulationData,\n      cachedGraphData: this.props.graphData\n    });\n  }\n\n  //remove steps where the animation does not change\n  cropAnimation = () => {\n    var data = this.props.simulationData.data;\n    var lastState = data.length - 1;\n    for (var i = data.length - 1; i > 0; i--) {\n      //if (this.checkIfStatesAreEqual(data, lastState, i)) {\n        //lastState = i;\n      //}\n      //console.log(data[lastState], data[i])\n      //console.log(data[lastState] === data[i])\n      if (data[lastState] === data[i]) {\n        lastState = i;\n      }\n    }\n    this.setState({animationLength: lastState})\n    //this.animationLength = lastState + 1;\n  }\n\n\n  recalculate = () => {\n    //normalize\n    this.props.normalize();\n    //then recalculate\n    this.props.recalculateFuntion().then(() => {\n      //now crop\n      this.cropAnimation();\n      //we now update the cached data\n      this.setState({\n        cachedColors: this.props.colors,\n        cachedSimulationData: this.props.simulationData,\n        cachedGraphData: this.props.graphData\n      });\n    });\n  }\n\n  switchView = () => {\n    if (this.state.currentView === \"graph\") {\n      this.setState( {\n        currentView: \"chart\"\n      });\n    } else {\n      this.setState( {\n        currentView: \"graph\"\n      });\n    }\n  }\n\n  showGraphOrChart = () => {\n    if (this.state.currentView === \"graph\") {\n      return (\n        <Graph animationLength={this.state.animationLength} graphData={this.state.cachedGraphData} normalize={this.props.normalize} colors={this.state.cachedColors} simulationData={this.state.cachedSimulationData.data}/>\n        );\n    } else {\n      return (\n        <div id=\"chart\">\n          <Chart stateCounts={this.state.cachedSimulationData.stateCounts} timeSteps={this.state.cachedSimulationData.timeSteps} colors={this.state.cachedColors} animationLength={this.state.animationLength}/>\n        </div>\n        );\n    }\n  }\n\n  render() {\n    //show directed graph *or* chart\n    //we want this to be a \"tabbed\" approach\n    //<Chart stateCounts={this.props.simulationData.stateCounts}/>\n    return (<div id=\"graphDiv\">\n      <button id=\"recalculate\" onClick={this.recalculate}>Recalculate 🔁</button>\n      <button id=\"switchView\" onClick={this.switchView}>{this.state.currentView === \"graph\" ? \"Show Chart 📈\" : \"Show Graph 📊\"}</button>\n      {this.showGraphOrChart()}\n      </div>);\n  }\n}\n\nexport default Visual;\n","import React from 'react';\nimport simulate from '../SimulationScripts/simulation.js'\nimport edgeListToGraph from '../SimulationScripts/graphUtils.js';\n\nimport '../css/Simulation.css'\n\nimport HorizonSelector from './HorizonSelector.jsx';\nimport ContactSelector from './ContactSelector.jsx';\nimport KarateClass from './exampleNetworks/Karate.jsx';\nimport ModelSelector from './ModelSelector.jsx';\nimport SIModel from './exampleModels/SIModel.jsx';\nimport Visual from './visualizations/Visual.jsx';\n\nclass Simulation extends React.Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\t// bind this to the function as it is calles from elsewhere\n\t\tthis.horizonChange = this.horizonChange.bind(this);\n\t\tthis.networkChange = this.networkChange.bind(this);\n\t\tthis.modelChanged = this.modelChanged.bind(this);\n\t\tthis.recalculate = this.recalculate.bind(this);\n\n    //HERE WE SET THE DEFAULT VALUES, THIS MUST BE CONSISTENT!!!!!\n\t\tthis.networkObject = new KarateClass();\n    this.modelObject = new SIModel();\n\n    //initialize the state correctly\n    var selectedModel = this.modelObject;\n    var graphData = edgeListToGraph(this.networkObject.getGraph());\n    var rules = selectedModel.getRules();\n    var states = selectedModel.getStates();\n    var initial_distribution = selectedModel.getDistribution();\n\n    //we have to run the simulation once in the beginning... sadly componentWillUnmount is deprecated\n    var newSimulationData = simulate(rules, states, initial_distribution, this.networkObject.getGraph(), 20.0);\n\n\t\tthis.state = {rules: rules, states: states, initial_distribution: initial_distribution, graphData: graphData, horizon: 20.0, selectedNetwork: this.networkObject, selectedModel: this.modelObject, simulationData: newSimulationData,};\n\t}\n\n\thorizonChange(e){\n\t\tif(e.target.value > 200){\n\t\t\te.target.value = 200\n\t\t}\n\t\tthis.setState({\n\t\t\thorizon: e.target.value\n\t\t});\n\t}\n\n\tnetworkChange(newNetwork){\n\t\tthis.setState({selectedNetwork: newNetwork});\n\t}\n\n  modelChanged(newModel) {\n    this.setState({selectedModel: newModel});\n  }\n\n recalculate(){\n    var selectedModel = this.state.selectedModel;\n    var graphData = edgeListToGraph(this.state.selectedNetwork.getGraph());\n    var rules = selectedModel.getRules();\n    var states = selectedModel.getStates();\n    var initial_distribution = selectedModel.getDistribution();\n\n    //first check if the distribution is equal to ~1\n    let sum = 0;\n    initial_distribution.forEach((element) => {\n      sum += element;\n    });\n    //check if the distribution is about 1\n    if (sum < 0.95 || sum > 1.05) {\n      return;\n    }\n\n    //update the values based on selected Models/Networks\n    //Simulate with given data\n    var newSimulationData = simulate(rules, states, initial_distribution, this.state.selectedNetwork.getGraph(), this.state.horizon);\n\n    this.setState({graphData: graphData, rules: rules, states: states, initial_distribution: initial_distribution, simulationData: newSimulationData});\n\n   //return a promise to be sure the data is saved\n   return Promise.resolve(\"Done\");\n\t}\n\n\trender(){\n    return (\n    <div id=\"Simulation\">\n      <div id=\"SimulationSettings\">\n        <HorizonSelector\n        handleChange={this.horizonChange}\n        currentValue={this.state.horizon}/>\n        <ContactSelector handleChange={this.networkChange}/>\n        <ModelSelector handleChange={this.modelChanged}/>\n      </div>\n      <div id=\"SimulationGraph\">\n        <Visual recalculateFuntion={this.recalculate}\n        graphData={this.state.graphData} simulationData={this.state.simulationData} colors={this.state.selectedModel.getColors()} normalize={this.state.selectedModel.normalizeDistribution}/>\n      </div>\n    </div>\n    );\n\t}\n}\nexport default Simulation;\n","import React from 'react';\nimport '../css/Header.css';\n\nclass HeaderData extends React.Component{\n\trender(){\n\t\treturn (\n      <div>\n        <h1>Network Epidemic Playground</h1>\n        <h2>Continuous-time stochastic simulation of epidemic spreading on human-to-human contact networks</h2>\n        <h3 id=\"credits\">Simulation developed by <a href=\"https://mosi.uni-saarland.de/people/gerrit/\" target=\"_blank\" rel=\"noreferrer\">Gerrit Großmann</a>, website developed by <a href=\"https://juliusherrmann.de\" target=\"_blank\" rel=\"noreferrer\">Julius Herrmann</a>. Source code on <a href=\"https://github.com/JuliusHerrmann/NetworkEpidemicPlayground\" target=\"_blank\" rel=\"noreferrer\">github</a>.</h3>\n      </div>\n\t\t);\n\t}\n}\n\nexport default HeaderData;\n","//import logo from './logo.svg';\nimport './css/App.css';\nimport React from 'react';\nimport Simulation from './Simulation/Simulation.jsx';\nimport HeaderData from './Header/Headerdata';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <link href=\"https://fonts.googleapis.com/css2?family=Roboto&display=swap\" rel=\"stylesheet\"/> \n      <HeaderData/>\n      <Simulation/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Strict mode was removed because of cytoscape\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}